diff --git a/array.sh b/array.sh
deleted file mode 100644
index 7cbf6c3..0000000
--- a/array.sh
+++ /dev/null
@@ -1,16 +0,0 @@
-#!/bin/bash
-#生成一个数组
-arr=($(seq 1 100))
-#访问arr的所有元素
-echo ${arr[*]}
-#获取arr的元素的个数
-echo ${#arr[*]}
-#获取arr的全部的key
-echo ${!arr[*]}
-#定义关联数组，即字典 declare为bash的内置命令，即声明变量，添加参数-A表示该变量为关联数组，即key可以是字符串
-declare -A dt
-dt["aaa"]=1
-dt["bbb"]=2
-dt["ccc"]=3
-echo ${!dt[*]}
-
diff --git a/forAndWhile.sh b/forAndWhile.sh
deleted file mode 100644
index f962cae..0000000
--- a/forAndWhile.sh
+++ /dev/null
@@ -1,14 +0,0 @@
-#!/bin/bash
-#while循环 两个独立的简短命令可以写在同一行，用分号分开即可
-i=0;sum=0
-while [ $i -le 100 ]
-do
-    ((i=$i+1,sum=$sum+$i*$i))
-    echo $i $sum
-done
-#在双括号中可以较为方便地处理变量并进行算术运算，在双括号里面支持C风格的代码，并且可以通过逗号分隔处理多个表达式，要比expr方便得多
-#for循环
-for i in $(seq 1 100)
-do 
-    echo $i
-done
diff --git a/function.sh b/function.sh
deleted file mode 100644
index 3ad9a13..0000000
--- a/function.sh
+++ /dev/null
@@ -1,10 +0,0 @@
-#!/bin/bash
-function getSum()
-{
-    sum=0
-    for value in ${*};do
-        ((sum=$sum+$value))
-    done
-    echo $sum
-}
-
diff --git a/grep.sh b/grep.sh
deleted file mode 100644
index 458aced..0000000
--- a/grep.sh
+++ /dev/null
@@ -1,12 +0,0 @@
-#!/bin/bash
-#目标路径名支持使用通配符 在shell脚本中表示路径尽量不要用双引号的字符串 因为无法支持例如通配符之类的特殊功能
-grep "print" ~/shellLab/*.{hpp,cpp,py}
-#通过添加-E参数，搜索的pattern是支持正则表达式的
-grep -E "[0-9]+" ~/shellLab/*.{hpp,cpp,py}
-#如果需要显示所找到的pattern在目标文件中的行数，可以增加-n参数
-#grep -E --line-number "[0-9]+" ~/shellLab/*.py
-#linux命令设置可选参数时，既可以写一道杠，也可以写两道杠。一道杠后边接单个字母，两道杠后接完整的单词。前者是unix风格的语法，后者是GNU风格的语法，前者的优点是简洁，后者的优点是可读性更强。例如，--line-number即是GNU风格的代码，表示在输出时显示所找到的pattern位于目标文件的哪一行，该参数换成unix风格的语法则只需要写-n，即
-#grep -E -n "[0-9]+" ~/shellLab/*.py
-#事实上上述命令可以写的更简洁，-E -n可以合并为-En
-#更多的关于grep的功能可以使用grep --help来查看
-
diff --git a/operation.sh b/operation.sh
index 3052b2f..f237537 100644
--- a/operation.sh
+++ b/operation.sh
@@ -1,41 +1,70 @@
 #!/bin/bash
 #算术运算 通过双小括号实现 要比expr好用的多
-a=43;b=56
+a=60;b=56
 ((c=$a+$b,d=$a*$b,e=$a%7))
 echo $c $d $e $f
-#浮点运算可以通过bc来实现 下面这句话的意思是，启动bc，然后在bc中执行echo输出的这两个命令
-f=$(echo "scale=4;$a*7.77" | bc)
-echo $f
-#当然也可以用python，不过似乎要慢不少，为了脚本效率计，还是尽量用bash的内置命令
-g=$(echo "x=$a*7.77;print(x)"| python)
-echo $g
-#下列形式要更好一些？这是python提供的标准调用方式之一
-h=$(python -c "x=$a*7.77;print(x)")
-echo $h
-#数值比较
-b=$a
-if [ $a -eq $b ]
+##浮点运算可以通过bc来实现 下面这句话的意思是，启动bc，然后在bc中执行echo输出的这两个命令
+x=$(echo "scale=4;$a*3.14" | bc)
+echo $x
+#双中括号 比较表达式的封装符
+# 数值比较
+if [[ $a -gt $b ]]
 then
-    echo "a equals to b"
+    echo "a is greater than b"
+elif [[ $a -lt $b ]]
+then
+    echo "a is less than b"
+else
+    echo "a is equal to b"
 fi
-#-eq 是否相当， -gt great than 是否大于 -ge greater and equal 大于等于 -lt less than 小于 -le 小于等于
-#字符串比较
-#= 是否相等 \>是否大于 \<是否小于
-s1="wky";s2="lzy"
-if [ $s1 \> $s2 -o $s1 = $s2 ]
+#-eq 相等，-gt 大于，-ge 大于等于，-lt 小于，-le 小于等于
+#字符串比较 在双中括号里面，支持c风格的表达式 
+s1="wky2";s2="wky1"
+if [[ $s1 > $s2 || $s1 == $s2 ]]
 then
     echo "s1 is greater or equal to s2"
+elif [[ $s1 < $s2 ]]
+then
+    echo "s1 is less to s2"
+else
+    echo "strange"
 fi
 #逻辑取反
-if [ ! $s1 \< $s2 ]
+if [[ ! $s1 < $s2 ]]
 then
-    echo "s1 is not less than s2"
+    echo "s1 greater or equal to s2"
+else
+    echo "s1 is less to s2"
 fi
 #文件判断
 fileDir=$(dirname $(readlink -f $0))
-fn="${fileDir}/schedule"
-# -e文件（含目录）是否存在 -d 文件是否是目录
-if [ -e $fileDir -a -d $fileDir ]
+fn="${fileDir}/schedule.doc"
+# -e 路径是否存在 -f 路径是否是文件 -d 路径是否为目录
+if [[ -e $fn && ! -d $fn ]]
 then
-    echo "${fileDir} exists and is a directory"
+    echo "${fn} exists but is not a directory"
 fi
+#for and while
+i=0
+s=0
+o=0
+while [[ $i -lt 100 ]]
+do
+    ((o=$i%2))
+    if [[ $o -eq 1 ]]
+    then
+        ((s=$s+$i*$i))
+    fi
+    ((i=$i+1))
+done
+echo $s
+o=0;s=0
+for i in $(seq 1 100)
+do
+    ((o=$i%2))
+    if [[ $o -eq 1 ]]
+    then
+        ((s=$s+$i*$i))
+    fi
+done
+echo $s
diff --git a/pipe.sh b/pipe.sh
deleted file mode 100644
index 6672851..0000000
--- a/pipe.sh
+++ /dev/null
@@ -1,7 +0,0 @@
-#!/bin/bash
-#bash中的piping可以实现将一个命令1的输出重定向到命令2，作为命令2的输入，写作command1 | command2
-#bc是bash内置的计算器，可以实现expr无法实现的浮点数运算。bc的最一般的使用方式是通过交互式窗口。在shell脚本中，则是通过管道来实现
-echo "scale=4;(2.777 - 1.4744)/3" | bc
-#scale=4表示精确到小数点后四位，也可以同bc来计算指数或者开平方
-echo "2^10" | bc
-echo "scale=3;sqrt(10)" | bc
diff --git a/pyTools.py b/pyTools.py
deleted file mode 100644
index eb27819..0000000
--- a/pyTools.py
+++ /dev/null
@@ -1,9 +0,0 @@
-import re
-def sum(n):
-    x=0
-    for i in range(n):
-        x=x+i
-    print(x)
-
-if __name__=='__main__':
-    pass
diff --git a/redirection.sh b/redirection.sh
deleted file mode 100644
index 41fe897..0000000
--- a/redirection.sh
+++ /dev/null
@@ -1,7 +0,0 @@
-#!/bin/bash
-#输出重定向 将标准输出重定向到out文件
-echo "hello, my name is wangkunyu, i am 36 years old" > out
-#>会覆盖原文件的内容，若想保留原文件的内容，可以追加输出重定向>>
-echo "i live in shenzhen" >> out
-#若想将stdout和stderr合并输出到out，可以写
-echo "i like the weather of shenzhen" 2>&1 >> out
diff --git a/schedhle.doc b/schedhle.doc
deleted file mode 100644
index 5bdd074..0000000
--- a/schedhle.doc
+++ /dev/null
@@ -1,64 +0,0 @@
-1. locale
-在linux根据用户的区域属性（即locale）来设置程序运行的语言环境和显示方式。
-具体而言，区域属性主要是指计算机用户使用的语言、所在的国家和地区，以及当地文化传统。为此，locale定义了一些常量，例如en_us.utf-8，表示语言为英语，地区为美国，字符集为utf-8；zh_cn.utf-8，表示语言为中文，地区为中国，字符集为utf-8
-linux通过一组环境变量来设置locale，包括但不限于LANG,LANGUAGE,LC_CTYPE,LC_TIME。LANG是默认值，如果不指定其他变量的值，则其他变量的默认值即是LANG的值，否则，则是指定的值。LC_ALL是一个宏，通过设置该变量的值，可以覆盖掉所有LC_*的值。
-这些环境变量比较适合在shell的配置脚本中设置，例如.bashrc或者.zshrc
-2. man
-用于获取系统参考手册的内容，极为实用，比--help更强大
-3. top（进程管理相关命令）
-OPTIONS,COMMANDS
-研究一下进程表字段的含义
-4. signal
-linux的进程间通信是通过相互发送signal来实现的。常见的signal有例如HUP,INT,QUIT,TERM,TSTP。语句kill pid，其原理就是向编号为pid的进程发送TERM信号，通知该进程terminate if possible
-5. 磁盘管理相关命令
-fdisk，一个dialog-driven的工具，用于创建、操作磁盘分区；mkfs.ext3，将磁盘分区做格式化为ext3；mnt，将格式化完毕的磁盘分区挂载到特定的目录；fsck，检查、修复磁盘分区；df，显示系统的磁盘空间；du，显示目录所用的磁盘空间的情况
-6. 理解filesystem
-filesystem的目的是，为数据在磁盘中的存储提供一个方案，所以也叫磁盘格式
-journaling filesystem，一种特定的磁盘格式类型，并不直接将数据写入磁盘，而是先写入一块临时的存储空间（journal）；
-7. sort和grep
-sort，对于文本行进行排序，-t，基于某个界定符将行划分为fields，-k，基于某个field进行排序，-k 3，表示基于第三个field进行排序，-d，按字典序排列，-n，按数值大小排序
-8. cat和less
-在不打开文件的情况下（这比用vim打开文件来的安全），获取文本文件的内容。cat一次性提取内容，less大概一个可滚动的窗口，便于交互式查看
-9. gzip和tar
-tar打包文件夹，gzip压缩文件
-gzip -d，解压
-10. subshell，命令替换以及background mode
-小括号，命令替换符号。其原理是，开启一个subshell，然后在subshell中执行小括号内部的命令，在小括号前面加上$符号，可以将subshell的输出提取到当前shell中
-subshell的作用是什么？可以为shell coding提供灵活性，这种灵活性主要体现在不同的命令和进程之间的互动和通信。比方说命令替换和管道。
-后台执行是不是一种subshell
-后台执行并不是一种subshell，而是shell和命令之间的一种关系，也即是shell只管启动命令的执行，但不等待命令执行的运行结束，以便shell不被该命令所占据
-就计算资源的消耗而言，subshell是比较昂贵的，滥用subshell可能导致代码效率的低下
-11. utf-8是unicode的一种实现，针对单字节字符和多字节字符分而治之，以节省空间。
-一个unicode_escape单元由斜杠，u，和一个16进制四位数构成
-unicode_escape bytes基于unicode_escape做decode即可得到str
-unicode_escape str基于utf8做encode，再基于unicode_escape做decode即可得到普通的str
-12. shell的built-in命令和外部命令 which和type
-13. 环境变量
-环境变量，刻画进程的运行环境的特性的变量
-对于ubuntu20.04 LTS，例如PATH，定义了运行程序和命令的查找目录，该变量定义在/etc/environment之中
-如果默认的登陆shell为bash，登陆shell启动时
-/etc/environment中的环境变量对于系统的所有用户有效，任何用户登陆都会加载此文件，如果希望仅对当前用户有效，则可以在~/.bashrc中设置或修改
-下一个问题，如果默认的登陆shell为zsh，则登陆shell启动时并不会加载bash相关的启动文件，那么该如何设置或修改环境变量？
-如果想在系统范围内修改，可以修改文件/etc/environment，修改之后重启shell即可生效，如果只希望对当前用户生效，则可以在.zshrc中设置和修改。
-zsh和bash是平层关系，而不是上下层关系。oh-my-zsh和zsh则是上下层关系
-14. 登陆shell，交互式shell和非交互式shell
-15. 文件权限和用户管理
-sudoer能否获得root的所有权限？
-新建删除用户，adduser和deluser比较友好，针对文件权限和组的操作
-16. 文件系统
-文件系统的作用是对于硬盘中存储的0和1进行解析，使之成为我们所熟悉的目录文件结构
-索引节点。为了顺利的解析文件，文件系统将一个文件相关的信息组成一个节点结构，例如文件名，大小，指向存有文件的每个硬盘块的指针。所有的索引节点组成节点表，节点表被放在每个物理设备的一块特定的区域。linux通过索引节点号来引用每一个节点。
-17. debian。一款早期的linux发行版。ubuntu是基于debian开发的，与debian有相同的APT管理系统，并共享来自debian库中的大量的包和库。Debian代表了当前存在的linux发行版的主流派系之一，其他的派系有arch和red hat等
-debian库，一个针对debian系的linux软件包库
-18. 软件包的安装和管理
-apt,dpkg，debian系的linux发行版用于安装和管理debian包的工具 dpkg,用于安装已经下载到本地的deb包，apt，从/etc/apt/sources.list中定义的软件镜像源中下载软件并安装
-dpkg -l和apt list --installed功能差不多，数据输出形式稍有不同
-apt-cache search
-这些搜索是基于package metadata来做的，而不是通过网络在线搜索。apt update会将debian库中软件的信息摘要下载到本地，从而可以通过apt-cache或者aptitude进行搜索
-什么叫做package cache和package metadata
-apt install,uninstall,purge
-19. 从源码安装sysstat
-20. linux会把系统内的所有文件记录在一个数据库文件中，使用locate可以在该数据库中去查找某个特定的文件，相比于find命令去遍历磁盘查找的方式效率会高得多；该数据库默认是一天更新一次，故而使用locate命令查找不到最近新建的文件，此时需要手动更新数据库，在命令行输入sudo updatedb即可完成更新
-which会在环境变量PATH指定的路径中，搜索某个系统命令的位置，并返回第一个搜索结果。故而其基本功能即是搜索系统可执行命令
-21.学习使用前述安装的sysstat
-22.学习使用git相关
diff --git a/source.sh b/source.sh
deleted file mode 100644
index 40be970..0000000
--- a/source.sh
+++ /dev/null
@@ -1,6 +0,0 @@
-#!/bin/bash
-#source fileName在当前的bash环境中读取并执行fileName文件
-#source的作用类似于python中的import，可以很方便地实现代码模块化和代码模块再利用
-source ./function.sh
-s=$(getSum 1 2 3 4 5 6 7 8 9 10)
-echo $s
diff --git a/string.sh b/string.sh
deleted file mode 100644
index 197e7a0..0000000
--- a/string.sh
+++ /dev/null
@@ -1,7 +0,0 @@
-#!/bin/bash
-#字符串即可用单引号也可用双引号包含
-name1='wky';name2="wky"
-echo $name1 $name2
-#但只有双引号的字符串可以做字符串变量替换，所以明智的做法是，一律采用双引号
-words="hello, my name is ${name1}, pleased to meet you"
-echo $words
diff --git a/subshell.sh b/subshell.sh
deleted file mode 100644
index 95e55ea..0000000
--- a/subshell.sh
+++ /dev/null
@@ -1,6 +0,0 @@
-#!/usr/bin/bash
-output=$(pwd;echo $BASH_SUBSHELL)
-echo $output
-#多个命令写到一行，以分号隔开，先后执行
-#小括号，命令替换符号。其原理是，开启一个subshell，然后在subshell中执行小括号内部的命令，在小括号前面加上$符号，可以将subshell的输出提取到当前shell中
-
